# Default Schema needed to define Root Node accessible
schema {
    query: Query
    mutation: Mutation
}

# Root Query Node that defines all queries accessible
type Query {
    allLinks(filter:LinkFilter, skip: Int = 0, first: Int = 0): [Link]
    allSamples(filter: SampleFilter, skip: Int = 0, first: Int = 0): [Sample]
}

# input Type used to filter Links
input LinkFilter {
    description_contains: String
    url_contains: String
}

# Link model with attributes
type Link {
    id: ID!
    url: String!
    description: String!
    postedBy: User
}


# Sample Model with attribues
type Sample {

    id: ID!
#    employeeId: String!
    processorId: String!
    markedLatitude: String!
    markedLongitude: String!
    killDate: String!
    species: String!
    killType: String!
    sex: String!
    age: String!
    earNotch: Boolean!
    Comments: String!
    cwdCode: String!
    customerID: String!
    gameCheckNumber: String!
    firstName: String!
    lastName:String!
    address: String!
    city: String!
    zipCode: String!
    phoneNumber: String!


}

# input type to help filter Samples
input SampleFilter {
    species_contains: String
    killType_contains: String
}

# User model with attributes
type User {
    id: ID!
    name: String!
    email: String
    password: String

}

# input type used to supply Authd data for User Type
input AuthData {
    email: String!
    password: String!
}

# Payload Model used with Authentication
type SigninPayload {
    token: String
    user: User
}

# Votes Model with attributes
type Vote {
    id:ID!
    createdAt: DateTime!
    user: User!
    link: Link!
}

# Custom Scalar type used for timestamping when User Type votes on Link type
scalar DateTime

# Root noded used to define all mutation accessible/able to perform on various Model Type
type Mutation {
    createUser(name: String!, authProvider: AuthData!): User
    createLink(url: String!, description: String!): Link
    createSample(
            id: ID!,
#            employeeId: String,
            processorId: String,
            markedLatitude: String,
            markedLongitude: String,
            killDate: String,
            species: String,
            killType: String,
            sex: String,
            age: String,
            earNotch: Boolean,
            Comments: String,
            cwdCode: String,
            customerID: String,
            gameCheckNumber: String,
            firstName: String,
            lastName: String,
            address: String,
            city: String,
            zipCode: String,
            phoneNumber: String): Sample

    signinUser(auth:AuthData): SigninPayload
    createVote(linkId: ID, userId: ID): Vote

}

